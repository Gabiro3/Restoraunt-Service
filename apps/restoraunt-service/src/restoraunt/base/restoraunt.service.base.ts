/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Restoraunt, // @ts-ignore
  User,
} from "@prisma/client";

export class RestorauntServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.RestorauntCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestorauntCountArgs>
  ): Promise<number> {
    return this.prisma.restoraunt.count(args);
  }

  async restoraunts<T extends Prisma.RestorauntFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestorauntFindManyArgs>
  ): Promise<Restoraunt[]> {
    return this.prisma.restoraunt.findMany(args);
  }
  async restoraunt<T extends Prisma.RestorauntFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestorauntFindUniqueArgs>
  ): Promise<Restoraunt | null> {
    return this.prisma.restoraunt.findUnique(args);
  }
  async createRestoraunt<T extends Prisma.RestorauntCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestorauntCreateArgs>
  ): Promise<Restoraunt> {
    return this.prisma.restoraunt.create<T>(args);
  }
  async updateRestoraunt<T extends Prisma.RestorauntUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestorauntUpdateArgs>
  ): Promise<Restoraunt> {
    return this.prisma.restoraunt.update<T>(args);
  }
  async deleteRestoraunt<T extends Prisma.RestorauntDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestorauntDeleteArgs>
  ): Promise<Restoraunt> {
    return this.prisma.restoraunt.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.restoraunt
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
