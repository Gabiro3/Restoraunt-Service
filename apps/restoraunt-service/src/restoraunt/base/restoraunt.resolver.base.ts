/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Restoraunt } from "./Restoraunt";
import { RestorauntCountArgs } from "./RestorauntCountArgs";
import { RestorauntFindManyArgs } from "./RestorauntFindManyArgs";
import { RestorauntFindUniqueArgs } from "./RestorauntFindUniqueArgs";
import { CreateRestorauntArgs } from "./CreateRestorauntArgs";
import { UpdateRestorauntArgs } from "./UpdateRestorauntArgs";
import { DeleteRestorauntArgs } from "./DeleteRestorauntArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { RestorauntService } from "../restoraunt.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Restoraunt)
export class RestorauntResolverBase {
  constructor(
    protected readonly service: RestorauntService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Restoraunt",
    action: "read",
    possession: "any",
  })
  async _restorauntsMeta(
    @graphql.Args() args: RestorauntCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Restoraunt])
  @nestAccessControl.UseRoles({
    resource: "Restoraunt",
    action: "read",
    possession: "any",
  })
  async restoraunts(
    @graphql.Args() args: RestorauntFindManyArgs
  ): Promise<Restoraunt[]> {
    return this.service.restoraunts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Restoraunt, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Restoraunt",
    action: "read",
    possession: "own",
  })
  async restoraunt(
    @graphql.Args() args: RestorauntFindUniqueArgs
  ): Promise<Restoraunt | null> {
    const result = await this.service.restoraunt(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Restoraunt)
  @nestAccessControl.UseRoles({
    resource: "Restoraunt",
    action: "create",
    possession: "any",
  })
  async createRestoraunt(
    @graphql.Args() args: CreateRestorauntArgs
  ): Promise<Restoraunt> {
    return await this.service.createRestoraunt({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Restoraunt)
  @nestAccessControl.UseRoles({
    resource: "Restoraunt",
    action: "update",
    possession: "any",
  })
  async updateRestoraunt(
    @graphql.Args() args: UpdateRestorauntArgs
  ): Promise<Restoraunt | null> {
    try {
      return await this.service.updateRestoraunt({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Restoraunt)
  @nestAccessControl.UseRoles({
    resource: "Restoraunt",
    action: "delete",
    possession: "any",
  })
  async deleteRestoraunt(
    @graphql.Args() args: DeleteRestorauntArgs
  ): Promise<Restoraunt | null> {
    try {
      return await this.service.deleteRestoraunt(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @graphql.Parent() parent: Restoraunt,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
